#!/usr/bin/env node

// START ENV

// chia plots params without tempDir and dist Dir
const plotsParams = 'plots create -k 32 -e -b 4000 -r 2 -u 128 -t';

const defaultDistDir = '/Volumes/cbj的硬盘';
const defaultTempDir = '/Volumes/cbj的硬盘/temp';

// chia client path
const chiaPath = '/Applications/Chia.app/Contents/Resources/app.asar.unpacked/daemon/chia';

// END ENV

const program = require('commander');
const readline = require('readline');
const util = require('util');
const { execFile, exec, spawn } = require('child_process');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const package = require('../package.json');
const FINISHED_LOG_LINES = 5217; // 128

program
  .version(package.version)
  .usage('[command] [options]')
  .option('-d, --distPath', 'plots distPath')
  .option('-t, --tempPath', 'plots tempPath')
  .parse(process.argv);

const { distPath = defaultDistDir, tempPath = defaultTempDir } = program.opts();
const cmd = `${chiaPath}`;
const params = plotsParams.split(' ').concat([tempPath, '-d', distPath]);

let chiaP;

process.on('SIGINT', function() {
  console.log('kill chiaP')
  chiaP.kill();
  program.runningCommand && program.runningCommand.kill('SIGKILL');
  process.exit(0);
});
let count = 0;
let loopTimes = 1;
let firstStartTime = new Date().getTime();
let startTime = new Date().getTime();
let lastEndTimeUsed;

function loopP() {
  chiaP = spawn(cmd, params);
  chiaP.stdout.on('data', (data) => {
    console.log(`stdout: ${data}`);
    console.log('count', count++);
    count += `${data}`.trim().split(/\r\n|\r|\n/).length;
    const progress = count / FINISHED_LOG_LINES;
    const durationMin = (Date.now() - startTime) / 1000 / 60;

    console.log(`
     progress ${loopTimes}: ${progress*100}%
     totalTime: ${(Date.now() - firstStartTime) / 1000 / 60} min
     thisTime: ${durationMin} min
     lastEndTimeUsed: ${lastEndTimeUsed} min
     `);

  });

  chiaP.stderr.on('data', (data) => {
    console.error(`stderr: ${data}`);
  });

  chiaP.on('close', (code) => {
    if (code == 1 || code == 0) {
      console.log('final lines count', count);
      lastEndTimeUsed = (Date.now() - startTime) / 1000 / 60;
      startTime = new Date().getTime();
      loopTimes++;
      count = 0;
      loopP();
    }
    console.log(`child process exited with code ${code}`);
  });
}

loopP();
